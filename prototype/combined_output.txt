# File: .\main.jl
using LinearAlgebra, SparseArrays
using PromptingTools
using PromptingTools.Experimental.RAGTools: FileChunker, build_index, SimpleIndexer, airag
using JSON3, Serialization
using Statistics: mean
using FileIO
using JLD2
const PT = PromptingTools
const RT = PromptingTools.Experimental.RAGTools

# Register models
PT.register_model!(name="deepseek-r1:1.5b", schema=PT.OllamaSchema())
PT.register_model!(name="nomic-embed-text:latest", schema=PT.OllamaSchema())

# File collection and combination functions (unchanged)
function collect_files_with_extensions(directory::String, extensions::Vector{String})
    files = String[]
    for (root, _, file_names) in walkdir(directory)
        for file_name in file_names
            if any(endswith(file_name, ext) for ext in extensions)
                relative_path = joinpath(relpath(root, directory), file_name)
                push!(files, relative_path)
            end
        end
    end
    return files
end

function write_combined_file(files::Vector{String}, output_file::String)
    open(output_file, "w") do io
        for file in files
            println(io, "# File: $file")
            open(file, "r") do f
                for line in eachline(f)
                    println(io, line)
                end
            end
            println(io, "\n")
        end
    end
end

# Define directory, extensions, and output file
directory = "."
extensions = [".jl", ".md", ".Rmd"]
output_file = "combined_output.txt"

# Collect files and create combined output
files = collect_files_with_extensions(directory, extensions)
write_combined_file(files, output_file)

# Build index
cfg = SimpleIndexer(chunker=FileChunker())
index = build_index(cfg, [output_file]; 
    embedder_kwargs = (
        schema = PT.OllamaSchema(), 
        model = "nomic-embed-text:latest"
    )
)
println("Index built with $(length(index)) chunks.")

# Save the index
index_file = "index.jld2"
println("Saving index to $index_file...")
@save index_file index
println("Index saved successfully.")

# Perform RAG query
answer = airag(index; 
    question = "Write a FunSQL.jl query to find all male patients in the database?",
    verbose = 2,
    retriever_kwargs = (
        model = "deepseek-r1:1.5b", 
        schema = PT.OllamaSchema(), 
        embedder_kwargs = (
            schema = PT.OllamaSchema(), 
            model = "nomic-embed-text:latest", 
            api_key = "ollama-dummy-key"
        )
    ),
    generator_kwargs = (
        model = "deepseek-r1:1.5b", 
        schema = PT.OllamaSchema(), 
        embedder_kwargs = (
            schema = PT.OllamaSchema(), 
            model = "nomic-embed-text:latest", 
            api_key = "ollama-dummy-key"
        )
    ),
    api_kwargs = (api_key = "ollama-dummy-key",)
)
println(answer)


